document.addEventListener('DOMContentLoaded', function() {
  // ===== –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° TELEGRAM =====
  let TELEGRAM_BOT_TOKEN = '';
  let TELEGRAM_CHAT_ID = '';
  let isTelegramReady = false;
  
  // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ñ–∞–π–ª–∞
  async function loadTelegramConfig() {
    try {
      const response = await fetch('secret/telegram-config.json');
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      return await response.json();
    } catch (error) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Telegram:', error);
      return null;
    }
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
  (async function initTelegram() {
    try {
      console.log('–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞...');
      
      // –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ GitHub Pages
      const config = await loadTelegramConfig();
      
      if (config && config.BOT_TOKEN && config.CHAT_ID) {
        TELEGRAM_BOT_TOKEN = config.BOT_TOKEN;
        TELEGRAM_CHAT_ID = config.CHAT_ID;
        isTelegramReady = true;
        
        console.log('Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
        console.log('–¢–æ–∫–µ–Ω:', TELEGRAM_BOT_TOKEN.substring(0, 6) + '...');
        console.log('Chat ID:', TELEGRAM_CHAT_ID);
      } else {
        console.warn('–ë–æ—Ç Telegram –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
      }
    } catch (error) {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
    }
  })();
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  let userId = localStorage.getItem('chat_user_id');
  if (!userId) {
    userId = Math.random().toString(36).substring(2, 11);
    localStorage.setItem('chat_user_id', userId);
    console.log('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π User ID:', userId);
  } else {
    console.log('–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π User ID:', userId);
  }

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram —Å –∑–∞—â–∏—Ç–æ–π
  async function sendToTelegram(text) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!isTelegramReady || !TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
      console.warn('–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –æ—Ç–º–µ–Ω–µ–Ω–∞: –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return false;
    }
    
    console.log('–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', text.substring(0, 50) + '...');
    
    try {
      // –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö CORS-–ø—Ä–æ–∫—Å–∏
      const proxyUrls = [
        'https://corsproxy.io/?', 
        'https://api.codetabs.com/v1/proxy?quest=',
        'https://cors-anywhere.herokuapp.com/'
      ];
      
      const apiUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
      
      // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
      for (const proxyUrl of proxyUrls) {
        try {
          const fullUrl = proxyUrl + encodeURIComponent(apiUrl);
          console.log('–ü—Ä–æ–±—É–µ–º –ø—Ä–æ–∫—Å–∏:', proxyUrl);
          
          const response = await fetch(fullUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              chat_id: TELEGRAM_CHAT_ID,
              text: text,
              parse_mode: 'HTML'
            })
          });
          
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          
          const data = await response.json();
          console.log('–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑', proxyUrl, data);
          return true;
          
        } catch (proxyError) {
          console.warn(`–û—à–∏–±–∫–∞ —Å –ø—Ä–æ–∫—Å–∏ ${proxyUrl}:`, proxyError.message);
        }
      }
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä—è–º—É—é –æ—Ç–ø—Ä–∞–≤–∫—É (–µ—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä —Ä–∞–∑—Ä–µ—à–∞–µ—Ç)
      try {
        console.log('–ü—Ä–æ–±—É–µ–º –ø—Ä—è–º—É—é –æ—Ç–ø—Ä–∞–≤–∫—É...');
        const directResponse = await fetch(apiUrl, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: TELEGRAM_CHAT_ID,
            text: text,
            parse_mode: 'HTML'
          })
        });
        
        if (directResponse.ok) {
          const data = await directResponse.json();
          console.log('–£—Å–ø–µ—à–Ω–∞—è –ø—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞!', data);
          return true;
        } else {
          throw new Error(`HTTP error! status: ${directResponse.status}`);
        }
      } catch (directError) {
        console.warn('–ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å:', directError.message);
      }
      
      console.error('–í—Å–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏');
      return false;
      
    } catch (error) {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
      return false;
    }
  }

  // ===== –û–°–¢–ê–õ–¨–ù–û–ô –ö–û–î =====
  // –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
  const mobileMenuToggle = document.getElementById('mobileMenuToggle');
  const navMenu = document.querySelector('.nav-menu');
  
  if (mobileMenuToggle) {
    mobileMenuToggle.addEventListener('click', function() {
      this.classList.toggle('active');
      navMenu.classList.toggle('active');
      document.body.classList.toggle('no-scroll');
    });
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å—Å—ã–ª–∫—É
  document.querySelectorAll('.nav-menu a').forEach(link => {
    link.addEventListener('click', () => {
      if (mobileMenuToggle) {
        mobileMenuToggle.classList.remove('active');
      }
      navMenu.classList.remove('active');
      document.body.classList.remove('no-scroll');
    });
  });

  // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  document.querySelectorAll('nav a').forEach(anchor => {
    anchor.addEventListener('click', function(e) {
      if (this.getAttribute('href').startsWith('#')) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
          window.scrollTo({
            top: target.offsetTop - 80,
            behavior: 'smooth'
          });
        }
      }
    });
  });

  // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
  const sections = document.querySelectorAll('section');
  const navLinks = document.querySelectorAll('.nav-menu a');
  
  function highlightNav() {
    let current = '';
    
    sections.forEach(section => {
      const sectionTop = section.offsetTop;
      const sectionHeight = section.clientHeight;
      
      if (pageYOffset >= sectionTop - 200) {
        current = section.getAttribute('id');
      }
    });
    
    navLinks.forEach(link => {
      link.classList.remove('active');
      if (link.getAttribute('href') === `#${current}`) {
        link.classList.add('active');
      }
    });
  }
  
  window.addEventListener('scroll', highlightNav);
  highlightNav(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
  const contactForm = document.querySelector('.contact-form');
  if (contactForm) {
    contactForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
      const formData = new FormData(this);
      const data = Object.fromEntries(formData);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      const phoneRegex = /^(\+7|8)[\d]{10}$/;
      const name = this.name.value.trim();
      const phone = this.telephone.value.trim();
      
      if (!name || !phone) {
        showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
        return;
      }
      
      if (!phoneRegex.test(phone)) {
        showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7XXXXXXXXXX)', 'error');
        return;
      }
      
      // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
      const telegramMessage = `
üì• <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –° –°–ê–ô–¢–ê!</b>
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îú <b>–ò–º—è:</b> ${data.name}
‚îú <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${data.telephone}
‚îú <b>Email:</b> ${data.email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚îî <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
${data.message || '–±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è'}
      `;
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
      const isSent = await sendToTelegram(telegramMessage);
      
      if (isSent) {
        showAlert('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', 'success');
        this.reset();
      } else {
        showAlert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error');
      }
    });
  }

  // –†–∞—Å–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è FAQ
  const faqItems = document.querySelectorAll('.faq-item');
  faqItems.forEach(item => {
    const question = item.querySelector('.faq-question');
    const answer = item.querySelector('.faq-answer');
    
    question.addEventListener('click', () => {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã
      document.querySelectorAll('.faq-answer').forEach(ans => {
        if (ans !== answer && ans.style.maxHeight) {
          ans.style.maxHeight = null;
          ans.previousElementSibling.classList.remove('active');
        }
      });
      
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç
      question.classList.toggle('active');
      answer.style.maxHeight = answer.style.maxHeight ? null : answer.scrollHeight + 'px';
    });
  });

  // –õ–∏–ø–∫–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
  window.addEventListener('scroll', function() {
    const nav = document.querySelector('.floating-nav');
    if (window.scrollY > 100) {
      nav.classList.add('scrolled');
    } else {
      nav.classList.remove('scrolled');
    }
  });

  // –ê–Ω–∏–º–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏
  const animateOnScroll = () => {
    const cards = document.querySelectorAll('.service-card, .pricing-card, .advantage-card');
    cards.forEach((card, index) => {
      const cardPosition = card.getBoundingClientRect().top;
      const screenPosition = window.innerHeight / 1.3;
      
      if (cardPosition < screenPosition) {
        setTimeout(() => {
          card.classList.add('show');
        }, index * 100);
      }
    });
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
  window.addEventListener('load', animateOnScroll);
  window.addEventListener('scroll', animateOnScroll);

  // –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  function showAlert(message, type) {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type}`;
    alertDiv.textContent = message;
    
    document.body.appendChild(alertDiv);
    
    // –°—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    alertDiv.style.position = 'fixed';
    alertDiv.style.top = '20px';
    alertDiv.style.right = '20px';
    alertDiv.style.padding = '15px 20px';
    alertDiv.style.borderRadius = '5px';
    alertDiv.style.color = 'white';
    alertDiv.style.zIndex = '1000';
    alertDiv.style.animation = 'fadeIn 0.3s ease-out';
    alertDiv.style.boxShadow = '0 4px 6px rgba(0,0,0,0.1)';
    
    if (type === 'error') {
      alertDiv.style.background = '#e74c3c';
    } else {
      alertDiv.style.background = '#2ecc71';
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
    setTimeout(() => {
      alertDiv.style.animation = 'fadeOut 0.3s ease-out';
      setTimeout(() => alertDiv.remove(), 300);
    }, 3000);
  }

  // –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  const orderCountInput = document.getElementById('order-count');
  if (orderCountInput) {
    orderCountInput.addEventListener('input', function() {
      const count = parseInt(this.value) || 0;
      let price = 40;
      
      if (count > 500) price = 30;
      else if (count > 100) price = 36;
      
      const result = count * price;
      document.getElementById('calculation-result').textContent = 
        result.toLocaleString('ru-RU');
    });
  }

  // –ö–Ω–æ–ø–∫–∞ "–ù–∞–≤–µ—Ä—Ö"
  const backToTopBtn = document.getElementById('back-to-top');
  if (backToTopBtn) {
    window.addEventListener('scroll', () => {
      if (window.scrollY > 500) {
        backToTopBtn.classList.add('visible');
      } else {
        backToTopBtn.classList.remove('visible');
      }
    });

    backToTopBtn.addEventListener('click', () => {
      window.scrollTo({
        top: 0,
        behavior: 'smooth'
      });
    });
  }

  // –ß–ê–¢ –ü–û–î–î–ï–†–ñ–ö–ò –° –ó–ê–©–ò–¢–û–ô
  const chatWidget = document.querySelector('.chat-widget');
  if (chatWidget) {
    const chatHeader = chatWidget.querySelector('.chat-header');
    const chatBody = chatWidget.querySelector('.chat-body');
    const chatMessages = chatWidget.querySelector('.chat-messages');
    const chatTextarea = chatWidget.querySelector('textarea');
    const sendBtn = chatWidget.querySelector('.send-btn');
    
    // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    let processedMessages = new Set();
    let lastUpdateId = 0;
    
    chatHeader.addEventListener('click', () => {
      chatBody.style.display = chatBody.style.display === 'flex' ? 'none' : 'flex';
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã textarea
    chatTextarea.addEventListener('input', function() {
      this.style.height = 'auto';
      this.style.height = (this.scrollHeight) + 'px';
    });
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    async function sendMessage() {
      const message = chatTextarea.value.trim();
      if (message) {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const messageDiv = document.createElement('div');
        messageDiv.className = 'chat-message user';
        messageDiv.innerHTML = `<div class="message-content">${message}</div>`;
        chatMessages.appendChild(messageDiv);
        
        chatTextarea.value = '';
        chatTextarea.style.height = 'auto';
        
        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        chatMessages.scrollTop = chatMessages.scrollHeight;
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞)
        if (isTelegramReady) {
          const telegramMessage = `üë§ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\nID: ${userId}\n\n${message}`;
          const isSent = await sendToTelegram(telegramMessage);
          
          if (!isSent) {
            showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error');
          }
        } else {
          console.warn('–ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
          showAlert('–ß–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ Telegram.', 'error');
        }
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
    sendBtn.addEventListener('click', sendMessage);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ Enter (–±–µ–∑ Shift)
    chatTextarea.addEventListener('keydown', function(e) {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        sendMessage();
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    if (isTelegramReady) {
      setInterval(async () => {
        try {
          // –ü–∞—Ä–∞–º–µ—Ç—Ä offset –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
          const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getUpdates?offset=${lastUpdateId + 1}`;
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
          const proxyUrls = [
            'https://corsproxy.io/?', 
            'https://api.codetabs.com/v1/proxy?quest=',
            'https://cors-anywhere.herokuapp.com/'
          ];
          
          let updates = null;
          
          for (const proxyUrl of proxyUrls) {
            try {
              const response = await fetch(proxyUrl + encodeURIComponent(url));
              const data = await response.json();
              
              if (data.ok) {
                updates = data;
                break;
              }
            } catch (error) {
              console.warn(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ ${proxyUrl}:`, error);
            }
          }
          
          if (!updates) {
            console.log('–ü—Ä–æ–±—É–µ–º –ø—Ä—è–º—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π...');
            try {
              const directResponse = await fetch(url);
              updates = await directResponse.json();
            } catch (directError) {
              console.warn('–ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª–∞—Å—å:', directError);
              return;
            }
          }
          
          if (updates.ok && updates.result.length > 0) {
            // –û–±–Ω–æ–≤–ª—è–µ–º lastUpdateId
            lastUpdateId = updates.result[updates.result.length - 1].update_id;
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            for (const update of updates.result) {
              if (update.message?.text?.includes(`/answer ${userId}`)) {
                const answer = update.message.text.replace(`/answer ${userId}`, '').trim();
                
                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Ç
                const replyDiv = document.createElement('div');
                replyDiv.className = 'chat-message bot';
                replyDiv.innerHTML = `<div class="message-content">${answer}</div>`;
                chatMessages.appendChild(replyDiv);
                
                // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                chatMessages.scrollTop = chatMessages.scrollHeight;
              }
            }
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        }
      }, 15000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
    } else {
      console.warn('–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —á–∞—Ç–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ: –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á–µ—Ç"
  const calculateBtn = document.getElementById('calculate-btn');
  if (calculateBtn) {
    calculateBtn.addEventListener('click', function() {
      document.querySelector('#contact').scrollIntoView({
        behavior: 'smooth'
      });
    });
  }

  // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏
  document.querySelectorAll('.btn').forEach(btn => {
    btn.addEventListener('mouseenter', function() {
      this.style.transform = 'translateY(-3px)';
    });
    btn.addEventListener('mouseleave', function() {
      this.style.transform = 'translateY(0)';
    });
  });

  // –ê–Ω–∏–º–∞—Ü–∏—è –≥–∞–ª–µ—Ä–µ–∏
  const galleryItems = document.querySelectorAll('.gallery-item');
  galleryItems.forEach(item => {
    item.addEventListener('mouseenter', function() {
      this.style.transform = 'scale(1.03)';
      this.style.zIndex = '10';
    });
    
    item.addEventListener('mouseleave', function() {
      this.style.transform = 'scale(1)';
      this.style.zIndex = '1';
    });
  });
});
